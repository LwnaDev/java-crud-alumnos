 // Se inicia la muestra de la tabla junto con los botones esenciales para el CRUD de alumnos

package Calificaciones01;

import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowEvent;
import java.sql.*;
import javax.swing.*;
import javax.swing.table.*;

public class FRegistro extends javax.swing.JFrame {
    Connection conn = null;
    PreparedStatement PStatement = null;
    ResultSet rs = null;
    Statement stmt = null;
    
    public FRegistro() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.dispose();
    }  
    // Metodo para limpiar la tabla esto no afecta los datos en la base de datos
    public void LimpiarTabla(JTable Tabla){
        try {
            DefaultTableModel modelo=(DefaultTableModel) Tabla.getModel();
            int filas=Tabla.getRowCount();
                for (int i = 0;filas>i; i++) {
                    modelo.removeRow(0);
                }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al limpiar la tabla.");
        }
    }

    DefaultTableModel dm;

    //Filtro o metodo buscar se usara para el tf de buscar
    private void buscar (String consulta, JTable Tabla) {
    dm = (DefaultTableModel) Tabla.getModel();
    TableRowSorter<DefaultTableModel> tr = new TableRowSorter<>(dm);
    Tabla.setRowSorter(tr);
    tr.setRowFilter(RowFilter.regexFilter(consulta));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        PanelBlancoFondo = new javax.swing.JPanel();
        lbTitulo = new javax.swing.JLabel();
        lbUpiicsa = new javax.swing.JLabel();
        btnEliminar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnVer = new javax.swing.JButton();
        btnAñadir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        lbIPN = new javax.swing.JLabel();
        PanelGuida2 = new javax.swing.JPanel();
        btnRefrescar = new javax.swing.JButton();
        btnCerrarSesion = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        cb_Filtro = new javax.swing.JComboBox<>();
        lb_Buscar = new javax.swing.JLabel();
        tf_Filtro = new javax.swing.JTextField();
        lb_FiltrarPor = new javax.swing.JLabel();
        lb_LeyendaPr = new javax.swing.JLabel();
        lb_PrGeneral1 = new javax.swing.JLabel();
        PanelGuinda1 = new javax.swing.JPanel();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Alumnos");
        setBounds(new java.awt.Rectangle(0, 0, 900, 500));
        setMinimumSize(new java.awt.Dimension(900, 500));
        setResizable(false);
        setSize(new java.awt.Dimension(900, 500));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        PanelBlancoFondo.setBackground(new java.awt.Color(255, 255, 255));

        lbTitulo.setFont(new java.awt.Font("Microsoft YaHei", 1, 18)); // NOI18N
        lbTitulo.setForeground(new java.awt.Color(0, 0, 0));
        lbTitulo.setText("REGISTRO DE ALUMNOS");

        lbUpiicsa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/logos/ubc.png"))); // NOI18N

        btnEliminar.setBackground(new java.awt.Color(255, 51, 51));
        btnEliminar.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnEliminar.setForeground(new java.awt.Color(0, 0, 0));
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/source_icons_cancel.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnEditar.setBackground(new java.awt.Color(204, 204, 0));
        btnEditar.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnEditar.setForeground(new java.awt.Color(0, 0, 0));
        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/source_icons_refresh-double.png"))); // NOI18N
        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnVer.setBackground(new java.awt.Color(255, 255, 255));
        btnVer.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnVer.setForeground(new java.awt.Color(0, 0, 0));
        btnVer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/source_icons_user.png"))); // NOI18N
        btnVer.setText("Ver");
        btnVer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerActionPerformed(evt);
            }
        });

        btnAñadir.setBackground(new java.awt.Color(102, 255, 102));
        btnAñadir.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnAñadir.setForeground(new java.awt.Color(0, 0, 0));
        btnAñadir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/source_icons_plus.png"))); // NOI18N
        btnAñadir.setText("Añadir");
        btnAñadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAñadirActionPerformed(evt);
            }
        });

        Tabla.setBackground(new java.awt.Color(102, 0, 204));
        Tabla.setBorder(new javax.swing.border.MatteBorder(null));
        Tabla.setFont(new java.awt.Font("Microsoft YaHei", 1, 12)); // NOI18N
        Tabla.setForeground(new java.awt.Color(255, 255, 255));
        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Numero Lista", "Nombre", "Primer Apellido", "Sexo", "Carrera", "Materia", "Plan", "D1", "D2", "D3", "Promedio", "Secuencia", "Equipo"
            }
        ));
        jScrollPane1.setViewportView(Tabla);

        lbIPN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/logos/ipn.png"))); // NOI18N

        PanelGuida2.setBackground(new java.awt.Color(108, 19, 43));

        javax.swing.GroupLayout PanelGuida2Layout = new javax.swing.GroupLayout(PanelGuida2);
        PanelGuida2.setLayout(PanelGuida2Layout);
        PanelGuida2Layout.setHorizontalGroup(
            PanelGuida2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        PanelGuida2Layout.setVerticalGroup(
            PanelGuida2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 26, Short.MAX_VALUE)
        );

        btnRefrescar.setBackground(new java.awt.Color(0, 255, 153));
        btnRefrescar.setFont(new java.awt.Font("Microsoft YaHei", 1, 12)); // NOI18N
        btnRefrescar.setForeground(new java.awt.Color(0, 0, 0));
        btnRefrescar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/source_icons_refresh-double.png"))); // NOI18N
        btnRefrescar.setText("Refrescar");
        btnRefrescar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefrescarActionPerformed(evt);
            }
        });

        btnCerrarSesion.setBackground(new java.awt.Color(255, 51, 102));
        btnCerrarSesion.setFont(new java.awt.Font("Microsoft YaHei", 1, 12)); // NOI18N
        btnCerrarSesion.setForeground(new java.awt.Color(255, 255, 255));
        btnCerrarSesion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/source_icons_home.png"))); // NOI18N
        btnCerrarSesion.setText("Cerrar Sesión");
        btnCerrarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarSesionActionPerformed(evt);
            }
        });

        btnSalir.setBackground(new java.awt.Color(255, 0, 0));
        btnSalir.setFont(new java.awt.Font("Microsoft YaHei", 1, 12)); // NOI18N
        btnSalir.setForeground(new java.awt.Color(255, 255, 255));
        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/source_icons_cancel.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        cb_Filtro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todo", "Mayor Promedio", "Menor Promedio", "Mayor a la M", "Menor o Igual M" }));
        cb_Filtro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_FiltroActionPerformed(evt);
            }
        });

        lb_Buscar.setFont(new java.awt.Font("Microsoft YaHei", 1, 12)); // NOI18N
        lb_Buscar.setForeground(new java.awt.Color(0, 0, 0));
        lb_Buscar.setText("BUSCAR:");

        tf_Filtro.setFont(new java.awt.Font("Microsoft YaHei", 0, 12)); // NOI18N
        tf_Filtro.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 0, 102)));
        tf_Filtro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tf_FiltroKeyReleased(evt);
            }
        });

        lb_FiltrarPor.setFont(new java.awt.Font("Microsoft YaHei", 1, 12)); // NOI18N
        lb_FiltrarPor.setForeground(new java.awt.Color(0, 0, 0));
        lb_FiltrarPor.setText("FILTRAR POR:");

        lb_LeyendaPr.setFont(new java.awt.Font("Microsoft YaHei", 1, 12)); // NOI18N
        lb_LeyendaPr.setForeground(new java.awt.Color(0, 0, 0));
        lb_LeyendaPr.setText("PROMEDIO GENERAL:");

        lb_PrGeneral1.setFont(new java.awt.Font("Microsoft YaHei", 1, 12)); // NOI18N
        lb_PrGeneral1.setForeground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout PanelBlancoFondoLayout = new javax.swing.GroupLayout(PanelBlancoFondo);
        PanelBlancoFondo.setLayout(PanelBlancoFondoLayout);
        PanelBlancoFondoLayout.setHorizontalGroup(
            PanelBlancoFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelBlancoFondoLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(PanelBlancoFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelBlancoFondoLayout.createSequentialGroup()
                        .addComponent(lbIPN, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(PanelBlancoFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(PanelBlancoFondoLayout.createSequentialGroup()
                                .addComponent(btnAñadir)
                                .addGap(18, 18, 18)
                                .addComponent(btnVer, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnEliminar))
                            .addGroup(PanelBlancoFondoLayout.createSequentialGroup()
                                .addComponent(lbTitulo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnCerrarSesion, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(PanelBlancoFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnRefrescar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSalir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(lbUpiicsa, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45))
                    .addGroup(PanelBlancoFondoLayout.createSequentialGroup()
                        .addGroup(PanelBlancoFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 817, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(PanelBlancoFondoLayout.createSequentialGroup()
                                .addComponent(lb_Buscar)
                                .addGap(18, 18, 18)
                                .addComponent(tf_Filtro, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lb_LeyendaPr, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lb_PrGeneral1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(53, 53, 53)
                                .addComponent(lb_FiltrarPor)
                                .addGap(18, 18, 18)
                                .addComponent(cb_Filtro, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelBlancoFondoLayout.createSequentialGroup()
                .addComponent(PanelGuida2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        PanelBlancoFondoLayout.setVerticalGroup(
            PanelBlancoFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelBlancoFondoLayout.createSequentialGroup()
                .addContainerGap(9, Short.MAX_VALUE)
                .addGroup(PanelBlancoFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelBlancoFondoLayout.createSequentialGroup()
                        .addGroup(PanelBlancoFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbTitulo)
                            .addComponent(btnCerrarSesion)
                            .addComponent(btnSalir))
                        .addGap(39, 39, 39)
                        .addGroup(PanelBlancoFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAñadir)
                            .addComponent(btnVer, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRefrescar))
                        .addGap(39, 39, 39))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelBlancoFondoLayout.createSequentialGroup()
                        .addComponent(lbIPN, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelBlancoFondoLayout.createSequentialGroup()
                        .addComponent(lbUpiicsa, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addGroup(PanelBlancoFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cb_Filtro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lb_Buscar)
                    .addComponent(tf_Filtro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lb_FiltrarPor)
                    .addComponent(lb_PrGeneral1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lb_LeyendaPr, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(PanelGuida2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        PanelGuinda1.setBackground(new java.awt.Color(108, 19, 43));

        javax.swing.GroupLayout PanelGuinda1Layout = new javax.swing.GroupLayout(PanelGuinda1);
        PanelGuinda1.setLayout(PanelGuinda1Layout);
        PanelGuinda1Layout.setHorizontalGroup(
            PanelGuinda1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        PanelGuinda1Layout.setVerticalGroup(
            PanelGuinda1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 32, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PanelBlancoFondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(PanelGuinda1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(PanelGuinda1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PanelBlancoFondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // Se mustra al iniciar el formulario
        conn = DBConexion.DBConexión();
          // Desde sql usando SELECT para la tabla alumnos y ordenando los datos desde el ultimo agregado (orden descendente)
          String sql = "SELECT * FROM alumnos ORDER BY NumeroLista DESC";
       try {
           
           PStatement = conn.prepareStatement(sql);
           rs = PStatement.executeQuery();
           DefaultTableModel model = (DefaultTableModel) Tabla.getModel();
           
           while(rs.next()){
               // Se llama a los campos de la tabla de bd a la tabla "Tabla".
               String id = rs.getString("NumeroLista");
               String lnombre = rs.getString("Nombre");
               String lApellido = rs.getString("ApellidoPaterno");
               String lSexo = rs.getString("Sexo");
               String lcarrera = rs.getString("Carrera");
               String lmateria = rs.getString("Materia");
               String lplan = rs.getString("PlanEstudios");
               String lD1 = rs.getString("D1");
               String lD2 = rs.getString("D2");
               String lD3 = rs.getString("D3");
               String lpromedio = rs.getString("PromedioR");
               String lsecuencia = rs.getString("Secuencia");
               String lequipo = rs.getString("NoEquipo");
               //String Sexo = rs.getString("sexo");
               // Se añaden los valores a cada columna
               Object[] row = { id, lnombre,lApellido, lSexo, lcarrera, lmateria, lplan, lD1, lD2, lD3, lpromedio, lsecuencia, lequipo };
               model.addRow(row);
           }
           // Si existiera un error este se debera mostrar en consola como una excepcion
       }catch(Exception ex) {
           System.out.println("Error: "+ex);
        }
            //Mustra el promedio grupal al momento en un label
            String sql2 = "SELECT AVG(PromedioR) AS PromedioR FROM alumnos WHERE PromedioR";
            try {
                PStatement = conn.prepareStatement(sql2);
                rs = PStatement.executeQuery();         
                while(rs.next()){
                    // Se llama al resultado de la operac´on sql
                    String Media = rs.getString("PromedioR");
                    lb_PrGeneral1.setText(Media);
                }
        }catch(Exception ex) {
            System.out.println("Error: "+ex);
        } 
    }//GEN-LAST:event_formWindowOpened

    private void btnVerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerActionPerformed
        // Se obtiene el NumeroLista que sirve como llave primaria
        // Boton ver nos redirige a FVisualizar par ver datos del alumno antes seleciconado
        int row = Tabla.getSelectedRow();
        String id = Tabla.getModel().getValueAt(row, 0).toString();
        
        FVisualizar Ver = new FVisualizar();
        Ver.id = id;
        Ver.setVisible(true);
        this.setVisible(false);
        this.dispose();       
    }//GEN-LAST:event_btnVerActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        // Boton para editar nos lleva al formulario FEditar pero antes se debera seleccionar un alumno
        int row = Tabla.getSelectedRow();
        String id = Tabla.getModel().getValueAt(row, 0).toString();
        
        FEditar Editar = new FEditar();
        Editar.id = id;
        Editar.setVisible(true);
        this.setVisible(false);
        this.dispose();     
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // Boton para eliminar
        int row = Tabla.getSelectedRow();
        String id = Tabla.getModel().getValueAt(row, 0).toString();
        String sql = "DELETE FROM alumnos WHERE NumeroLista ="+id+"";
        int dialogButton = JOptionPane.showConfirmDialog (null, "¿Esta Seguro?","ALERTA",JOptionPane.YES_NO_OPTION);
        if(dialogButton == 0){
            try {
                  stmt = conn.createStatement();
                  if(stmt.executeUpdate(sql) == 1){
                    JOptionPane.showMessageDialog(null,"Se elimino con exito","ALERTA",JOptionPane.INFORMATION_MESSAGE);
                    // Refrescar la ventana para mostrar los dataos actualizados
                    this.setVisible(false);
                    new FRegistro().setVisible(true);
                    
                } else {
                    JOptionPane.showMessageDialog(null,"Error al eliminar","ALERTA",JOptionPane.WARNING_MESSAGE);
                }
            } catch(Exception ex) {
                System.out.println("Error: "+ex);
            }
        }
        
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnAñadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAñadirActionPerformed
        // Boton añadir nos redirige al formulario FAñadir
        new FAñadir().setVisible(true);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_btnAñadirActionPerformed

    private void btnRefrescarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefrescarActionPerformed
        // Boton refrescar (que no tiene caso pero cumple su funcion) esta aqui para llenar ese espacio blanco que quedaba jaja
        this.setVisible(false);
        new FRegistro().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnRefrescarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        // Boton salir, cierra el programa
        System.exit(0);
    }//GEN-LAST:event_btnSalirActionPerformed

    private void cb_FiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_FiltroActionPerformed
        // Filtro aca || Menor o Igual M || Mayor a la M || Todo
        // Inician las comparaciones para ComboBox
        if(cb_Filtro.getSelectedItem().toString().equals("Mayor Promedio")){
            // Este metodo se usa para limpiar la tabla definido con anterioridad
            LimpiarTabla(Tabla);
            // JOptionPane.showMessageDialog(null,"TEST","ALERTA",JOptionPane.WARNING_MESSAGE); 
            conn = DBConexion.DBConexión();
            // Se hace una consulta mysql de la tabla alumnos de la columna PromedioR pero imprimiendo en tabla los mayores a 7
            String sql = "SELECT * FROM alumnos WHERE PromedioR > 7";
            try {
                PStatement = conn.prepareStatement(sql);
                rs = PStatement.executeQuery();
                DefaultTableModel model = (DefaultTableModel) Tabla.getModel();
           
                while(rs.next()){
                    // Se llama a los campos de la tabla de bd a la tabla "Tabla".
                    String id = rs.getString("NumeroLista");
                    String lnombre = rs.getString("Nombre");
                    String lApellido = rs.getString("ApellidoPaterno");
                    String lSexo = rs.getString("Sexo");
                    String lcarrera = rs.getString("Carrera");
                    String lmateria = rs.getString("Materia");
                    String lplan = rs.getString("PlanEstudios");
                    String lD1 = rs.getString("D1");
                    String lD2 = rs.getString("D2");
                    String lD3 = rs.getString("D3");
                    String lpromedio = rs.getString("PromedioR");
                    String lsecuencia = rs.getString("Secuencia");
                    String lequipo = rs.getString("NoEquipo");
                    Object[] row = { id, lnombre,lApellido, lSexo, lcarrera, lmateria, lplan, lD1, lD2, lD3, lpromedio, lsecuencia, lequipo };
                    model.addRow(row);
                }
                // Si existiera un error este se debera mostrar en consola como una excepcion
            } catch(Exception ex) {
                System.out.println("Error: "+ex);
            }
        }
        else if(cb_Filtro.getSelectedItem().toString().equals("Menor Promedio")){
            LimpiarTabla(Tabla);
            conn = DBConexion.DBConexión();
            // Se hace una consulta mysql de la tabla alumnos de la columna PromedioR pero imprimiendo en tabla los menores o iguales a 6
            String sql = "SELECT * FROM alumnos WHERE PromedioR <= 6";
            try {
                PStatement = conn.prepareStatement(sql);
                rs = PStatement.executeQuery();
                DefaultTableModel model = (DefaultTableModel) Tabla.getModel();
                while(rs.next()){
                    // Se llama a los campos de la tabla de bd a la tabla "Tabla".
                    String id = rs.getString("NumeroLista");
                    String lnombre = rs.getString("Nombre");
                    String lApellido = rs.getString("ApellidoPaterno");
                    String lSexo = rs.getString("Sexo");
                    String lcarrera = rs.getString("Carrera");
                    String lmateria = rs.getString("Materia");
                    String lplan = rs.getString("PlanEstudios");
                    String lD1 = rs.getString("D1");
                    String lD2 = rs.getString("D2");
                    String lD3 = rs.getString("D3");
                    String lpromedio = rs.getString("PromedioR");
                    String lsecuencia = rs.getString("Secuencia");
                    String lequipo = rs.getString("NoEquipo");
                    // Se añaden los valores a cada columna
                    Object[] row = { id, lnombre,lApellido, lSexo, lcarrera, lmateria, lplan, lD1, lD2, lD3, lpromedio, lsecuencia, lequipo };
                    model.addRow(row);
                }
                // Si existiera un error este se debera mostrar en consola como una excepcion
            } catch(Exception ex) {
                System.out.println("Error: "+ex);
            }
                //lb_ValorAlumno.setText("9");
        }
        else if(cb_Filtro.getSelectedItem().toString().equals("Mayor a la M")){
            LimpiarTabla(Tabla);
            conn = DBConexion.DBConexión();
            // Se hace una comsulta mysql con una subconsulta de promedio grupal y posteriormente por alumno de la columna PromedioR
            // Se imprimen los mayores al promedio grupal            
            String sql = "SELECT * FROM alumnos WHERE PromedioR > (SELECT AVG(PromedioR) FROM alumnos)";    
            try {
                PStatement = conn.prepareStatement(sql);
                rs = PStatement.executeQuery();
                DefaultTableModel model = (DefaultTableModel) Tabla.getModel();
                while(rs.next()){
                    // Se llama a los campos de la tabla de bd a la tabla "Tabla".
                    String id = rs.getString("NumeroLista");
                        String lnombre = rs.getString("Nombre");
                    String lApellido = rs.getString("ApellidoPaterno");
                    String lSexo = rs.getString("Sexo");
                    String lcarrera = rs.getString("Carrera");
                    String lmateria = rs.getString("Materia");
                    String lplan = rs.getString("PlanEstudios");
                    String lD1 = rs.getString("D1");
                    String lD2 = rs.getString("D2");
                    String lD3 = rs.getString("D3");
                    String lpromedio = rs.getString("PromedioR");
                    String lsecuencia = rs.getString("Secuencia");
                    String lequipo = rs.getString("NoEquipo");
                    Object[] row = { id, lnombre,lApellido, lSexo, lcarrera, lmateria, lplan, lD1, lD2, lD3, lpromedio, lsecuencia, lequipo };
                    model.addRow(row);
                }
            } catch(Exception ex) {
            System.out.println("Error: "+ex);
            }
        }
        else if(cb_Filtro.getSelectedItem().toString().equals("Menor o Igual M")){
            LimpiarTabla(Tabla);
            conn = DBConexion.DBConexión();
            // Se hace una comsulta mysql con una subconsulta de promedio grupal y posteriormente por alumno de la columna PromedioR
            // Se imprimen los menores o iguales al promedio grupal            
            String sql = "SELECT * FROM alumnos WHERE PromedioR <= (SELECT AVG(PromedioR) FROM alumnos)";    
            try {
                PStatement = conn.prepareStatement(sql);
                rs = PStatement.executeQuery();
                DefaultTableModel model = (DefaultTableModel) Tabla.getModel();
                while(rs.next()){
                    // Se llama a los campos de la tabla de bd a la tabla "Tabla".
                    String id = rs.getString("NumeroLista");
                    String lnombre = rs.getString("Nombre");
                    String lApellido = rs.getString("ApellidoPaterno");
                    String lSexo = rs.getString("Sexo");
                    String lcarrera = rs.getString("Carrera");
                    String lmateria = rs.getString("Materia");
                    String lplan = rs.getString("PlanEstudios");
                    String lD1 = rs.getString("D1");
                    String lD2 = rs.getString("D2");
                    String lD3 = rs.getString("D3");
                    String lpromedio = rs.getString("PromedioR");
                    String lsecuencia = rs.getString("Secuencia");
                    String lequipo = rs.getString("NoEquipo");
                    Object[] row = { id, lnombre,lApellido, lSexo, lcarrera, lmateria, lplan, lD1, lD2, lD3, lpromedio, lsecuencia, lequipo };
                    model.addRow(row);
                }
            } catch(Exception ex) {
            System.out.println("Error: "+ex);
            }            
        }
        else if(cb_Filtro.getSelectedItem().toString().equals("Todo")){
            LimpiarTabla(Tabla);
            conn = DBConexion.DBConexión();
            // Desde sql usando SELECT para la tabla alumnos y ordenando los datos desde el ultimo agregado (orden descendente)
            String sql = "SELECT * FROM alumnos ORDER BY NumeroLista DESC";
                try {
                    PStatement = conn.prepareStatement(sql);
                    rs = PStatement.executeQuery();
                    DefaultTableModel model = (DefaultTableModel) Tabla.getModel();
                    while(rs.next()){
                        // Se llama a los campos de la tabla de bd a la tabla "Tabla".
                        String id = rs.getString("NumeroLista");
                        String lnombre = rs.getString("Nombre");
                        String lApellido = rs.getString("ApellidoPaterno");
                        String lSexo = rs.getString("Sexo");
                        String lcarrera = rs.getString("Carrera");
                        String lmateria = rs.getString("Materia");
                        String lplan = rs.getString("PlanEstudios");
                        String lD1 = rs.getString("D1");
                        String lD2 = rs.getString("D2");
                        String lD3 = rs.getString("D3");
                        String lpromedio = rs.getString("PromedioR");
                        String lsecuencia = rs.getString("Secuencia");
                        String lequipo = rs.getString("NoEquipo");
                        //String Sexo = rs.getString("sexo");
                        // Se añaden los valores a cada columna
                        Object[] row = { id, lnombre,lApellido, lSexo, lcarrera, lmateria, lplan, lD1, lD2, lD3, lpromedio, lsecuencia, lequipo };
                        model.addRow(row);
                    }
           // Si existiera un error este se debera mostrar en consola como una excepcion
                } catch(Exception ex) {
                    System.out.println("Error: "+ex);
                }
        }
    }//GEN-LAST:event_cb_FiltroActionPerformed

    private void tf_FiltroKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_FiltroKeyReleased
        buscar(tf_Filtro.getText().toUpperCase(), Tabla);
    }//GEN-LAST:event_tf_FiltroKeyReleased

    private void btnCerrarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarSesionActionPerformed
        // Boton cerrar sesiómn regresa al FLogin
        this.setVisible(false);
        new FLogin().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnCerrarSesionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FRegistro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FRegistro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FRegistro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FRegistro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FRegistro().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelBlancoFondo;
    private javax.swing.JPanel PanelGuida2;
    private javax.swing.JPanel PanelGuinda1;
    private javax.swing.JTable Tabla;
    private javax.swing.JButton btnAñadir;
    private javax.swing.JButton btnCerrarSesion;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnRefrescar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JButton btnVer;
    private javax.swing.JComboBox<String> cb_Filtro;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lbIPN;
    private javax.swing.JLabel lbTitulo;
    private javax.swing.JLabel lbUpiicsa;
    private javax.swing.JLabel lb_Buscar;
    private javax.swing.JLabel lb_FiltrarPor;
    private javax.swing.JLabel lb_LeyendaPr;
    private javax.swing.JLabel lb_PrGeneral1;
    private javax.swing.JTextField tf_Filtro;
    // End of variables declaration//GEN-END:variables
}
